
=== _set_board called ===
Input board:
4 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 2
Board after copy:
4 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 2

=== _set_board called ===
Input board:
4 0 0 0 0 0 0 0
0 1 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 3 0
0 0 0 0 0 0 0 2
Board after copy:
4 0 0 0 0 0 0 0
0 1 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 3 0
0 0 0 0 0 0 0 2

=== _set_board called ===
Input board:
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
3 0 0 0 0 0 0 0
0 0 0 0 0 0 0 1
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
Board after copy:
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
3 0 0 0 0 0 0 0
0 0 0 0 0 0 0 1
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0

=== get_valid_moves for player CheckersPiece.WHITE ===

Board with coordinates:
   0 1 2 3 4 5 6 7
0: . . . . . . . .  0
1: . . . . . . . .  1
2: . . . . . . . .  2
3: W . . . . . . .  3
4: . . . . . . . B  4
5: . . . . . . . .  5
6: . . . . . . . .  6
7: . . . . . . . .  7
   0 1 2 3 4 5 6 7

Player CheckersPiece.WHITE pieces: [(3, 0, np.int64(3)), (4, 7, np.int64(1))]

Checking piece at (3,0) = 3
  Skipping direction (-1,-1) - invalid for this piece
  Skipping direction (-1,1) - invalid for this piece
  Checking capture direction: (1,-1) -> jumped: (4,-1), dest: (5,-2)
  _is_valid_position(5,-2): on_board=False, dark_square=False => False
    Invalid destination position (5,-2)
  Checking capture direction: (1,1) -> jumped: (4,1), dest: (5,2)
  _is_valid_position(5,2): on_board=True, dark_square=False => False
    Invalid destination position (5,2)

Checking piece at (4,7) = 1
  Checking capture direction: (-1,-1) -> jumped: (3,6), dest: (2,5)
  _is_valid_position(2,5): on_board=True, dark_square=False => False
    Invalid destination position (2,5)
  Checking capture direction: (-1,1) -> jumped: (3,8), dest: (2,9)
  _is_valid_position(2,9): on_board=False, dark_square=False => False
    Invalid destination position (2,9)
  Skipping direction (1,-1) - invalid for this piece
  Skipping direction (1,1) - invalid for this piece

All capture moves: []
No capture moves found, checking for regular moves...

Checking piece at (3,0) = 3 for regular moves
  Skipping direction (-1,-1) - invalid for this piece
  Skipping direction (-1,1) - invalid for this piece
  Checking move to (4,-1)
  _is_valid_position(4,-1): on_board=False, dark_square=False => False
    Invalid destination position (4,-1)
  Checking move to (4,1)
  _is_valid_position(4,1): on_board=True, dark_square=False => False
    Invalid destination position (4,1)

Checking piece at (4,7) = 1 for regular moves
  Checking move to (3,6)
  _is_valid_position(3,6): on_board=True, dark_square=False => False
    Invalid destination position (3,6)
  Checking move to (3,8)
  _is_valid_position(3,8): on_board=False, dark_square=False => False
    Invalid destination position (3,8)
  Skipping direction (1,-1) - invalid for this piece
  Skipping direction (1,1) - invalid for this piece

All regular moves: []

=== _set_board called ===
Input board:
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 3 0 0 0 0
0 0 0 0 1 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 1 0
0 0 0 0 0 0 0 0
Board after copy:
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 3 0 0 0 0
0 0 0 0 1 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 1 0
0 0 0 0 0 0 0 0

=== get_valid_moves for player CheckersPiece.BLACK ===

Board with coordinates:
   0 1 2 3 4 5 6 7
0: . . . . . . . .  0
1: . . . . . . . .  1
2: . . . . . . . .  2
3: . . . W . . . .  3
4: . . . . B . . .  4
5: . . . . . . . .  5
6: . . . . . . B .  6
7: . . . . . . . .  7
   0 1 2 3 4 5 6 7

Player CheckersPiece.BLACK pieces: [(3, 3, np.int64(3)), (4, 4, np.int64(1)), (6, 6, np.int64(1))]

Checking piece at (3,3) = 3
  Skipping direction (-1,-1) - invalid for this piece
  Skipping direction (-1,1) - invalid for this piece
  Checking capture direction: (1,-1) -> jumped: (4,2), dest: (5,1)
  _is_valid_position(5,1): on_board=True, dark_square=True => True
  _is_valid_position(4,2): on_board=True, dark_square=True => True
    No piece to jump at (4,2)
  Checking capture direction: (1,1) -> jumped: (4,4), dest: (5,5)
  _is_valid_position(5,5): on_board=True, dark_square=True => True
  _is_valid_position(4,4): on_board=True, dark_square=True => True
    Piece at (4,4) is not an opponent's piece

Checking piece at (4,4) = 1
  Checking capture direction: (-1,-1) -> jumped: (3,3), dest: (2,2)
  _is_valid_position(2,2): on_board=True, dark_square=True => True
  _is_valid_position(3,3): on_board=True, dark_square=True => True
    Piece at (3,3) is not an opponent's piece
  Checking capture direction: (-1,1) -> jumped: (3,5), dest: (2,6)
  _is_valid_position(2,6): on_board=True, dark_square=True => True
  _is_valid_position(3,5): on_board=True, dark_square=True => True
    No piece to jump at (3,5)
  Skipping direction (1,-1) - invalid for this piece
  Skipping direction (1,1) - invalid for this piece

Checking piece at (6,6) = 1
  Checking capture direction: (-1,-1) -> jumped: (5,5), dest: (4,4)
  _is_valid_position(4,4): on_board=True, dark_square=True => True
    Destination (4,4) is not empty: 1
  Checking capture direction: (-1,1) -> jumped: (5,7), dest: (4,8)
  _is_valid_position(4,8): on_board=False, dark_square=True => False
    Invalid destination position (4,8)
  Skipping direction (1,-1) - invalid for this piece
  Skipping direction (1,1) - invalid for this piece

All capture moves: []
No capture moves found, checking for regular moves...

Checking piece at (3,3) = 3 for regular moves
  Skipping direction (-1,-1) - invalid for this piece
  Skipping direction (-1,1) - invalid for this piece
  Checking move to (4,2)
  _is_valid_position(4,2): on_board=True, dark_square=True => True
    Found valid move: (3,3) -> (4,2)
  Checking move to (4,4)
  _is_valid_position(4,4): on_board=True, dark_square=True => True
    Destination (4,4) is not empty: 1

Checking piece at (4,4) = 1 for regular moves
  Checking move to (3,3)
  _is_valid_position(3,3): on_board=True, dark_square=True => True
    Destination (3,3) is not empty: 3
  Checking move to (3,5)
  _is_valid_position(3,5): on_board=True, dark_square=True => True
    Found valid move: (4,4) -> (3,5)
  Skipping direction (1,-1) - invalid for this piece
  Skipping direction (1,1) - invalid for this piece

Checking piece at (6,6) = 1 for regular moves
  Checking move to (5,5)
  _is_valid_position(5,5): on_board=True, dark_square=True => True
    Found valid move: (6,6) -> (5,5)
  Checking move to (5,7)
  _is_valid_position(5,7): on_board=True, dark_square=True => True
    Found valid move: (6,6) -> (5,7)
  Skipping direction (1,-1) - invalid for this piece
  Skipping direction (1,1) - invalid for this piece

All regular moves: [{'from': (3, 3), 'to': (4, 2)}, {'from': (4, 4), 'to': (3, 5)}, {'from': (6, 6), 'to': (5, 5)}, {'from': (6, 6), 'to': (5, 7)}]

=== _set_board called ===
Input board:
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 3 0 0 0 0
0 0 0 0 2 0 0 0
0 0 0 0 0 3 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
Board after copy:
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 3 0 0 0 0
0 0 0 0 2 0 0 0
0 0 0 0 0 3 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0

=== get_valid_moves for player CheckersPiece.BLACK ===

Board with coordinates:
   0 1 2 3 4 5 6 7
0: . . . . . . . .  0
1: . . . . . . . .  1
2: . . . . . . . .  2
3: . . . W . . . .  3
4: . . . . BK . . .  4
5: . . . . . W . .  5
6: . . . . . . . .  6
7: . . . . . . . .  7
   0 1 2 3 4 5 6 7

Player CheckersPiece.BLACK pieces: [(3, 3, np.int64(3)), (5, 5, np.int64(3))]

Checking piece at (3,3) = 3
  Skipping direction (-1,-1) - invalid for this piece
  Skipping direction (-1,1) - invalid for this piece
  Checking capture direction: (1,-1) -> jumped: (4,2), dest: (5,1)
  _is_valid_position(5,1): on_board=True, dark_square=True => True
  _is_valid_position(4,2): on_board=True, dark_square=True => True
    No piece to jump at (4,2)
  Checking capture direction: (1,1) -> jumped: (4,4), dest: (5,5)
  _is_valid_position(5,5): on_board=True, dark_square=True => True
    Destination (5,5) is not empty: 3

Checking piece at (5,5) = 3
  Skipping direction (-1,-1) - invalid for this piece
  Skipping direction (-1,1) - invalid for this piece
  Checking capture direction: (1,-1) -> jumped: (6,4), dest: (7,3)
  _is_valid_position(7,3): on_board=True, dark_square=True => True
  _is_valid_position(6,4): on_board=True, dark_square=True => True
    No piece to jump at (6,4)
  Checking capture direction: (1,1) -> jumped: (6,6), dest: (7,7)
  _is_valid_position(7,7): on_board=True, dark_square=True => True
  _is_valid_position(6,6): on_board=True, dark_square=True => True
    No piece to jump at (6,6)

All capture moves: []
No capture moves found, checking for regular moves...

Checking piece at (3,3) = 3 for regular moves
  Skipping direction (-1,-1) - invalid for this piece
  Skipping direction (-1,1) - invalid for this piece
  Checking move to (4,2)
  _is_valid_position(4,2): on_board=True, dark_square=True => True
    Found valid move: (3,3) -> (4,2)
  Checking move to (4,4)
  _is_valid_position(4,4): on_board=True, dark_square=True => True
    Destination (4,4) is not empty: 2

Checking piece at (5,5) = 3 for regular moves
  Skipping direction (-1,-1) - invalid for this piece
  Skipping direction (-1,1) - invalid for this piece
  Checking move to (6,4)
  _is_valid_position(6,4): on_board=True, dark_square=True => True
    Found valid move: (5,5) -> (6,4)
  Checking move to (6,6)
  _is_valid_position(6,6): on_board=True, dark_square=True => True
    Found valid move: (5,5) -> (6,6)

All regular moves: [{'from': (3, 3), 'to': (4, 2)}, {'from': (5, 5), 'to': (6, 4)}, {'from': (5, 5), 'to': (6, 6)}]

=== _set_board called ===
Input board:
0 0 0 0 0 0 0 0
0 3 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
Board after copy:
0 0 0 0 0 0 0 0
0 3 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0

=== validate_move called with: {'move': {'from': (1, 1), 'to': (0, 0)}} ===
Current player: CheckersPiece.WHITE
Attempting move from (1,1) to (0,0)
Piece at source (1,1): 3
  _is_valid_position(0,0): on_board=True, dark_square=True => True

=== _get_possible_moves for piece at (1,1) = 3 ===
  Current player: CheckersPiece.WHITE
  is_king: False, is_black: False
  Possible move directions: [(1, -1), (1, 1)]
  
Checking capture move from (1,1) to (3,-1) over (2,0)
  _is_valid_position(3,-1): on_board=False, dark_square=True => False
    Invalid landing position (3,-1) - out of bounds or not a dark square
  
Checking capture move from (1,1) to (3,3) over (2,2)
  _is_valid_position(3,3): on_board=True, dark_square=True => True
  _is_valid_position(2,2): on_board=True, dark_square=True => True
    No piece to jump at (2,2)
  No capture moves found, checking regular moves
  
Checking regular move from (1,1) to (2,0)
  _is_valid_position(2,0): on_board=True, dark_square=True => True
    Valid regular move found: (1,1) -> (2,0)
    Found valid move to (2, 0)
  
Checking regular move from (1,1) to (2,2)
  _is_valid_position(2,2): on_board=True, dark_square=True => True
    Valid regular move found: (1,1) -> (2,2)
    Found valid move to (2, 2)

  All valid moves: [(2, 0), (2, 2)]
Possible moves from (1,1): [(2, 0), (2, 2)]
Move to (0,0) is not in possible moves

=== _set_board called ===
Input board:
0 0 0 0 0 0 0 0
0 0 0 3 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 3 0 3 0 0
0 0 0 0 1 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
Board after copy:
0 0 0 0 0 0 0 0
0 0 0 3 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 3 0 3 0 0
0 0 0 0 1 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0

=== validate_move called with: {'move': {'from': (4, 4), 'to': (2, 2)}} ===
Current player: CheckersPiece.BLACK
Attempting move from (4,4) to (2,2)
Piece at source (4,4): 1
  _is_valid_position(2,2): on_board=True, dark_square=True => True

=== _get_possible_moves for piece at (4,4) = 1 ===
  Current player: CheckersPiece.BLACK
  is_king: False, is_black: True
  Possible move directions: [(-1, -1), (-1, 1)]
  
Checking capture move from (4,4) to (2,2) over (3,3)
  _is_valid_position(2,2): on_board=True, dark_square=True => True
  _is_valid_position(3,3): on_board=True, dark_square=True => True
    Jumped piece at (3,3) = 3, is_opponent: True
    Valid capture move found: (4,4) -> (2,2)
  
Checking capture move from (4,4) to (2,6) over (3,5)
  _is_valid_position(2,6): on_board=True, dark_square=True => True
  _is_valid_position(3,5): on_board=True, dark_square=True => True
    Jumped piece at (3,5) = 3, is_opponent: True
    Valid capture move found: (4,4) -> (2,6)
  Found 2 capture moves: [(2, 2), (2, 6)]
Possible moves from (4,4): [(2, 2), (2, 6)]
Move is valid

=== validate_move called with: {'move': {'from': (4, 4), 'to': (2, 2)}} ===
Current player: CheckersPiece.BLACK
Attempting move from (4,4) to (2,2)
Piece at source (4,4): 1
  _is_valid_position(2,2): on_board=True, dark_square=True => True

=== _get_possible_moves for piece at (4,4) = 1 ===
  Current player: CheckersPiece.BLACK
  is_king: False, is_black: True
  Possible move directions: [(-1, -1), (-1, 1)]
  
Checking capture move from (4,4) to (2,2) over (3,3)
  _is_valid_position(2,2): on_board=True, dark_square=True => True
  _is_valid_position(3,3): on_board=True, dark_square=True => True
    Jumped piece at (3,3) = 3, is_opponent: True
    Valid capture move found: (4,4) -> (2,2)
  
Checking capture move from (4,4) to (2,6) over (3,5)
  _is_valid_position(2,6): on_board=True, dark_square=True => True
  _is_valid_position(3,5): on_board=True, dark_square=True => True
    Jumped piece at (3,5) = 3, is_opponent: True
    Valid capture move found: (4,4) -> (2,6)
  Found 2 capture moves: [(2, 2), (2, 6)]
Possible moves from (4,4): [(2, 2), (2, 6)]
Move is valid

=== _get_possible_moves for piece at (2,2) = 1 ===
  Current player: CheckersPiece.BLACK
  is_king: False, is_black: True
  Possible move directions: [(-1, -1), (-1, 1)]
  
Checking capture move from (2,2) to (0,0) over (1,1)
  _is_valid_position(0,0): on_board=True, dark_square=True => True
  _is_valid_position(1,1): on_board=True, dark_square=True => True
    No piece to jump at (1,1)
  
Checking capture move from (2,2) to (0,4) over (1,3)
  _is_valid_position(0,4): on_board=True, dark_square=True => True
  _is_valid_position(1,3): on_board=True, dark_square=True => True
    Jumped piece at (1,3) = 3, is_opponent: True
    Valid capture move found: (2,2) -> (0,4)
  Found 1 capture moves: [(0, 4)]

=== validate_move called with: {'move': {'from': (2, 2), 'to': (0, 4)}} ===
Current player: CheckersPiece.BLACK
Attempting move from (2,2) to (0,4)
Piece at source (2,2): 1
  _is_valid_position(0,4): on_board=True, dark_square=True => True

=== _get_possible_moves for piece at (2,2) = 1 ===
  Current player: CheckersPiece.BLACK
  is_king: False, is_black: True
  Possible move directions: [(-1, -1), (-1, 1)]
  
Checking capture move from (2,2) to (0,0) over (1,1)
  _is_valid_position(0,0): on_board=True, dark_square=True => True
  _is_valid_position(1,1): on_board=True, dark_square=True => True
    No piece to jump at (1,1)
  
Checking capture move from (2,2) to (0,4) over (1,3)
  _is_valid_position(0,4): on_board=True, dark_square=True => True
  _is_valid_position(1,3): on_board=True, dark_square=True => True
    Jumped piece at (1,3) = 3, is_opponent: True
    Valid capture move found: (2,2) -> (0,4)
  Found 1 capture moves: [(0, 4)]
Possible moves from (2,2): [(0, 4)]
Move is valid

=== validate_move called with: {'move': {'from': (2, 2), 'to': (0, 4)}} ===
Current player: CheckersPiece.BLACK
Attempting move from (2,2) to (0,4)
Piece at source (2,2): 1
  _is_valid_position(0,4): on_board=True, dark_square=True => True

=== _get_possible_moves for piece at (2,2) = 1 ===
  Current player: CheckersPiece.BLACK
  is_king: False, is_black: True
  Possible move directions: [(-1, -1), (-1, 1)]
  
Checking capture move from (2,2) to (0,0) over (1,1)
  _is_valid_position(0,0): on_board=True, dark_square=True => True
  _is_valid_position(1,1): on_board=True, dark_square=True => True
    No piece to jump at (1,1)
  
Checking capture move from (2,2) to (0,4) over (1,3)
  _is_valid_position(0,4): on_board=True, dark_square=True => True
  _is_valid_position(1,3): on_board=True, dark_square=True => True
    Jumped piece at (1,3) = 3, is_opponent: True
    Valid capture move found: (2,2) -> (0,4)
  Found 1 capture moves: [(0, 4)]
Possible moves from (2,2): [(0, 4)]
Move is valid

=== _get_possible_moves for piece at (0,4) = 1 ===
  Current player: CheckersPiece.BLACK
  is_king: False, is_black: True
  Possible move directions: [(-1, -1), (-1, 1)]
  
Checking capture move from (0,4) to (-2,2) over (-1,3)
  _is_valid_position(-2,2): on_board=False, dark_square=True => False
    Invalid landing position (-2,2) - out of bounds or not a dark square
  
Checking capture move from (0,4) to (-2,6) over (-1,5)
  _is_valid_position(-2,6): on_board=False, dark_square=True => False
    Invalid landing position (-2,6) - out of bounds or not a dark square
  No capture moves found, checking regular moves
  
Checking regular move from (0,4) to (-1,3)
  _is_valid_position(-1,3): on_board=False, dark_square=True => False
    Invalid position (-1,3) - out of bounds or not a dark square
  
Checking regular move from (0,4) to (-1,5)
  _is_valid_position(-1,5): on_board=False, dark_square=True => False
    Invalid position (-1,5) - out of bounds or not a dark square

  All valid moves: []

Setting up board:
   0 1 2 3 4 5 6 7
0: . . . . . . . .
1: . . . . . . . .
2: . W . . . . . .
3: . . . . . . . .
4: . . . . . . . .
5: B . . . . . . .
6: . . . . . . . .
7: . . . . . . . .

=== _set_board called ===
Input board:
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 3 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
1 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
Board after copy:
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 3 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
1 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0

Board after _set_custom_board:
   0 1 2 3 4 5 6 7
0: . . . . . . . .
1: . . . . . . . .
2: . W . . . . . .
3: . . . . . . . .
4: . . . . . . . .
5: B . . . . . . .
6: . . . . . . . .
7: . . . . . . . .

=== Test 1: Moving white piece (2,1) to (3,0) ===
Current player: CheckersPiece.WHITE
Piece at (2,1): 3
Piece at (3,0): 0

Getting possible moves for white piece at (2,1):

=== _get_possible_moves for piece at (2,1) = 3 ===
  Current player: CheckersPiece.WHITE
  is_king: False, is_black: False
  Possible move directions: [(1, -1), (1, 1)]
  
Checking capture move from (2,1) to (4,-1) over (3,0)
  _is_valid_position(4,-1): on_board=False, dark_square=False => False
    Invalid landing position (4,-1) - out of bounds or not a dark square
  
Checking capture move from (2,1) to (4,3) over (3,2)
  _is_valid_position(4,3): on_board=True, dark_square=False => False
    Invalid landing position (4,3) - out of bounds or not a dark square
  No capture moves found, checking regular moves
  
Checking regular move from (2,1) to (3,0)
  _is_valid_position(3,0): on_board=True, dark_square=False => False
    Invalid position (3,0) - out of bounds or not a dark square
  
Checking regular move from (2,1) to (3,2)
  _is_valid_position(3,2): on_board=True, dark_square=False => False
    Invalid position (3,2) - out of bounds or not a dark square

  All valid moves: []
Possible moves from (2,1): []

=== validate_move called with: {'move': {'from': (2, 1), 'to': (3, 0)}} ===
Current player: CheckersPiece.WHITE
Attempting move from (2,1) to (3,0)
Piece at source (2,1): 3
  _is_valid_position(3,0): on_board=True, dark_square=False => False
Destination position (3,0) is not valid
Move {'move': {'from': (2, 1), 'to': (3, 0)}} is valid: False

=== _set_board called ===
Input board:
3 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 1
Board after copy:
3 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 1

=== _set_board called ===
Input board:
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 3
Board after copy:
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 3
